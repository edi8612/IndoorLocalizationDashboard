// <auto-generated />
using System;
using IndoorLocalizationSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IndoorLocalizationSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.Property<string>("CoursesId")
                        .HasColumnType("text");

                    b.Property<int>("StudentsId")
                        .HasColumnType("integer");

                    b.HasKey("CoursesId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("CourseStudent");
                });

            modelBuilder.Entity("IndoorLocalizationSystem.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("IndoorLocalizationSystem.Models.Classroom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Classrooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 0,
                            Name = "Lab A"
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 0,
                            Name = "Room 101"
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 0,
                            Name = "Room 202"
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 0,
                            Name = "Lab B"
                        });
                });

            modelBuilder.Entity("IndoorLocalizationSystem.Models.Course", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("ClassroomId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProfessorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("ProfessorId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ClassroomId = 1,
                            Name = "Computer Networks",
                            ProfessorId = 1
                        },
                        new
                        {
                            Id = "2",
                            ClassroomId = 2,
                            Name = "IoT Security",
                            ProfessorId = 1
                        },
                        new
                        {
                            Id = "3",
                            ClassroomId = 3,
                            Name = "Embedded Systems",
                            ProfessorId = 2
                        },
                        new
                        {
                            Id = "4",
                            ClassroomId = 4,
                            Name = "AI in Edge Devices",
                            ProfessorId = 3
                        });
                });

            modelBuilder.Entity("IndoorLocalizationSystem.Models.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("MACAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("PositionX")
                        .HasColumnType("real");

                    b.Property<float>("PositionY")
                        .HasColumnType("real");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("Devices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MACAddress = "AA:BB:CC:DD:EE:01",
                            Name = "Alice's iPhone",
                            PositionX = 1.73f,
                            PositionY = 2.5f,
                            StudentId = 1
                        },
                        new
                        {
                            Id = 2,
                            MACAddress = "AA:BB:CC:DD:EE:02",
                            Name = "Bob's Galaxy",
                            PositionX = 1.8f,
                            PositionY = 2.1f,
                            StudentId = 2
                        },
                        new
                        {
                            Id = 3,
                            MACAddress = "AA:BB:CC:DD:EE:03",
                            Name = "Elena's Pixel",
                            PositionX = 2f,
                            PositionY = 3f,
                            StudentId = 3
                        },
                        new
                        {
                            Id = 4,
                            MACAddress = "AA:BB:CC:DD:EE:04",
                            Name = "Liam's Tablet",
                            PositionX = 2.5f,
                            PositionY = 1.5f,
                            StudentId = 4
                        },
                        new
                        {
                            Id = 5,
                            MACAddress = "AA:BB:CC:DD:EE:05",
                            Name = "Noah's Phone",
                            PositionX = 3.2f,
                            PositionY = 2.3f,
                            StudentId = 5
                        },
                        new
                        {
                            Id = 6,
                            MACAddress = "AA:BB:CC:DD:EE:06",
                            Name = "Emma's Phone",
                            PositionX = 3f,
                            PositionY = 1f,
                            StudentId = 6
                        });
                });

            modelBuilder.Entity("IndoorLocalizationSystem.Models.Professor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Professors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Dr. Wayne",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Prof. Miller",
                            UserId = 5
                        },
                        new
                        {
                            Id = 3,
                            Name = "Dr. Smith",
                            UserId = 6
                        });
                });

            modelBuilder.Entity("IndoorLocalizationSystem.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Attended")
                        .HasColumnType("boolean");

                    b.Property<int>("ClassroomId")
                        .HasColumnType("integer");

                    b.Property<int>("DeviceId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Attended = true,
                            ClassroomId = 1,
                            DeviceId = 1,
                            Name = "Alice Johnson",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Attended = false,
                            ClassroomId = 2,
                            DeviceId = 2,
                            Name = "Bob Smith",
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            Attended = true,
                            ClassroomId = 3,
                            DeviceId = 3,
                            Name = "Elena White",
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            Attended = true,
                            ClassroomId = 1,
                            DeviceId = 4,
                            Name = "Liam Brown",
                            UserId = 7
                        },
                        new
                        {
                            Id = 5,
                            Attended = false,
                            ClassroomId = 2,
                            DeviceId = 5,
                            Name = "Noah King",
                            UserId = 8
                        },
                        new
                        {
                            Id = 6,
                            Attended = true,
                            ClassroomId = 4,
                            DeviceId = 6,
                            Name = "Emma Stone",
                            UserId = 9
                        });
                });

            modelBuilder.Entity("IndoorLocalizationSystem.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "wayne@university.edu",
                            Password = "hashed1",
                            Role = "Professor",
                            Username = "wayne"
                        },
                        new
                        {
                            Id = 2,
                            Email = "alice@university.edu",
                            Password = "hashed2",
                            Role = "Student",
                            Username = "alice"
                        },
                        new
                        {
                            Id = 3,
                            Email = "bob@university.edu",
                            Password = "hashed3",
                            Role = "Student",
                            Username = "bob"
                        },
                        new
                        {
                            Id = 4,
                            Email = "elena@university.edu",
                            Password = "hashed4",
                            Role = "Student",
                            Username = "elena"
                        },
                        new
                        {
                            Id = 5,
                            Email = "miller@university.edu",
                            Password = "hashed5",
                            Role = "Professor",
                            Username = "miller"
                        },
                        new
                        {
                            Id = 6,
                            Email = "smith@university.edu",
                            Password = "hashed6",
                            Role = "Professor",
                            Username = "smith"
                        },
                        new
                        {
                            Id = 7,
                            Email = "brown@university.edu",
                            Password = "hashed6",
                            Role = "Student",
                            Username = "brown"
                        },
                        new
                        {
                            Id = 8,
                            Email = "king@university.edu",
                            Password = "hashed6",
                            Role = "Student",
                            Username = "king"
                        },
                        new
                        {
                            Id = 9,
                            Email = "stone@university.edu",
                            Password = "hashed6",
                            Role = "Student",
                            Username = "stone"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.HasOne("IndoorLocalizationSystem.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IndoorLocalizationSystem.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IndoorLocalizationSystem.Models.Course", b =>
                {
                    b.HasOne("IndoorLocalizationSystem.Models.Classroom", "Classroom")
                        .WithMany("Courses")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IndoorLocalizationSystem.Models.Professor", "Professor")
                        .WithMany("Courses")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("IndoorLocalizationSystem.Models.Device", b =>
                {
                    b.HasOne("IndoorLocalizationSystem.Models.Student", "Student")
                        .WithOne("Device")
                        .HasForeignKey("IndoorLocalizationSystem.Models.Device", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("IndoorLocalizationSystem.Models.Professor", b =>
                {
                    b.HasOne("IndoorLocalizationSystem.Models.User", "User")
                        .WithOne("Professor")
                        .HasForeignKey("IndoorLocalizationSystem.Models.Professor", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IndoorLocalizationSystem.Models.Student", b =>
                {
                    b.HasOne("IndoorLocalizationSystem.Models.Classroom", "Classroom")
                        .WithMany("Students")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IndoorLocalizationSystem.Models.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("IndoorLocalizationSystem.Models.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IndoorLocalizationSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IndoorLocalizationSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IndoorLocalizationSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IndoorLocalizationSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IndoorLocalizationSystem.Models.Classroom", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("IndoorLocalizationSystem.Models.Professor", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("IndoorLocalizationSystem.Models.Student", b =>
                {
                    b.Navigation("Device");
                });

            modelBuilder.Entity("IndoorLocalizationSystem.Models.User", b =>
                {
                    b.Navigation("Professor");

                    b.Navigation("Student");
                });
#pragma warning restore 612, 618
        }
    }
}
